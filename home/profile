# shellcheck disable=SC2148
# ~/.profile: executed by the command interpreter for login shells.
# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login
# exists.
# see /usr/share/doc/bash/examples/startup-files for examples.
# the files are located in the bash-doc package.

# the default umask is set in /etc/profile; for setting the umask
# for ssh logins, install and configure the libpam-umask package.
#umask 022

# if running bash
if [ -n "$BASH_VERSION" ]; then
    # include .bashrc if it exists
    if [ -f "$HOME/.bashrc" ]; then
    . "$HOME/.bashrc"
    fi
fi

onpath() {
  echo "$PATH | grep -q $1"
}

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/bin" ] && ! onpath "$HOME/bin"
then
    PATH="$HOME/bin:$PATH"
fi

if [ -n "$BASH_VERSION" ]
then
    # add rbenv to path
    if [ -d "$HOME/.rbenv" ] && ! onpath "$HOME/.rbenv"
    then
        PATH="$PATH:$HOME/.rbenv/bin"
        PATH="$PATH:$HOME/.rbenv/shims"
    	eval "$(rbenv init -)"
    fi
fi

# set less options, fancy stuff like mouse wheel scrolling
# http://superuser.com/a/455213
export LESS=-asrRix8

# enable CTRL+S forward searching of Bash history with readline
# Most terminals override Ctrl+S to suspend execution until Ctrl+Q is entered.
# This is known as XON/XOFF flow control. Disable XON/XOFF.
stty -ixon

# attach tmux session, if one exists, and we're not already inside tmux
command -v tmux >/dev/null 2>&1 &&
  [ -z ${TMUX+x} ] &&
  tmux list-sessions >/dev/null 2>&1 &&
  tmux attach

# used for `repo` alias
export DEVMACHINE=pi4
export DEVROOT=/home/pi/src

# disable deprecation warnings for Bash in MacOS Ventura and later
export BASH_SILENCE_DEPRECATION_WARNING=1

# Install Homebrew paths on MacOS
if [ "$(uname)" == "Darwin" ]; then
  ARCH=$(uname -m)
  case $ARCH in
    aarch64) # ARCH="arm64" # Apple Silicon
      eval "$(/opt/homebrew/bin/brew shellenv)"
      ;;
    x86_64) # ARCH="amd64" # Intel
      eval "$(/usr/local/bin/brew shellenv)"
      ;;
    *) echo >&2 "No case to load brew on arch $ARCH";;
  esac

fi

# install git bash completion
if [ -n "$BASH_VERSION" ]
then
  source /Users/philip/src/dotfiles/scripts/bash_completion.d/../git-completion.bash
fi

# install ssh hostname completion
if [ -n "$BASH_VERSION" ]
then
  source /Users/philip/src/dotfiles/scripts/bash_completion.d/../ssh-completion.bash
fi

# install tmux bash completion
if [ -n "$BASH_VERSION" ]
then
  source /Users/philip/src/dotfiles/scripts/bash_completion.d/../bash_completion_tmux.sh
fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm

# set up Go workspace
if ! [ -d $HOME/go ]
then
  mkdir -p $HOME/go
fi
export GOPATH=$HOME/go

# install golang path
if [ -d /usr/local/go/bin ]
then
  export PATH="$PATH:/usr/local/go/bin:$GOPATH/bin"
fi

_direnv_hook() {
  local previous_exit_status=$?;
  trap -- '' SIGINT;
  eval "$("/usr/local/bin/direnv" export bash)";
  trap - SIGINT;
  return $previous_exit_status;
};
if ! [[ "${PROMPT_COMMAND:-}" =~ _direnv_hook ]]; then
  PROMPT_COMMAND="_direnv_hook${PROMPT_COMMAND:+;$PROMPT_COMMAND}"
fi

# pip bash completion start
_pip_completion()
{
    COMPREPLY=( $( COMP_WORDS="${COMP_WORDS[*]}" \
                   COMP_CWORD=$COMP_CWORD \
                   PIP_AUTO_COMPLETE=1 $1 2>/dev/null ) )
}
complete -o default -F _pip_completion pip
# pip bash completion end

# Rust Cargo toolchain
. "$HOME/.cargo/env"
